type token =
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | EQ
  | PLUS
  | MINUS
  | MULT
  | DIV
  | LESS
  | GREATER
  | CHAR of (
# 7 "parser.mly"
        char
# 19 "parser.ml"
)
  | INT of (
# 8 "parser.mly"
        int
# 24 "parser.ml"
)
  | IDENT of (
# 9 "parser.mly"
        string
# 29 "parser.ml"
)
  | TRUE
  | FALSE
  | REC
  | EOF
  | LPAREN
  | RPAREN
  | COMMA
  | RIGHT_ARROW

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 44 "parser.ml"
let yytransl_const = [|
  257 (* LET *);
  258 (* IN *);
  259 (* IF *);
  260 (* THEN *);
  261 (* ELSE *);
  262 (* FUN *);
  263 (* EQ *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* MULT *);
  267 (* DIV *);
  268 (* LESS *);
  269 (* GREATER *);
  273 (* TRUE *);
  274 (* FALSE *);
  275 (* REC *);
    0 (* EOF *);
  276 (* LPAREN *);
  277 (* RPAREN *);
  278 (* COMMA *);
  279 (* RIGHT_ARROW *);
    0|]

let yytransl_block = [|
  270 (* CHAR *);
  271 (* INT *);
  272 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\004\000\006\000\
\007\000\006\000\002\000\005\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\002\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\003\000\006\000\
\005\000\000\000\024\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\023\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\028\000\016\000"

let yysindex = "\010\000\
\017\255\000\000\246\254\017\255\248\254\000\000\000\000\000\000\
\000\000\017\255\000\000\110\000\000\000\248\254\240\254\006\255\
\134\255\252\254\091\255\017\255\017\255\017\255\017\255\017\255\
\017\255\017\255\000\000\210\255\008\255\000\000\237\254\017\255\
\017\255\017\255\000\000\017\255\123\000\210\255\210\255\136\000\
\136\000\210\255\210\255\017\255\000\000\248\254\154\255\172\255\
\123\000\113\255\192\255\001\255\017\255\017\255\000\000\017\255\
\000\000\226\255\210\255\226\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\062\000\072\000\001\000\
\014\000\083\000\087\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\093\000\058\000"

let yygindex = "\000\000\
\000\000\020\000\002\000"

let yytablesize = 412
let yytable = "\013\000\
\015\000\045\000\046\000\015\000\030\000\013\000\018\000\013\000\
\014\000\015\000\001\000\015\000\032\000\016\000\044\000\029\000\
\031\000\003\000\034\000\004\000\012\000\057\000\005\000\017\000\
\007\000\000\000\000\000\000\000\000\000\019\000\000\000\006\000\
\007\000\008\000\009\000\017\000\010\000\000\000\000\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\008\000\052\000\
\000\000\000\000\011\000\047\000\048\000\049\000\000\000\050\000\
\000\000\009\000\000\000\000\000\000\000\013\000\000\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\058\000\059\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\003\000\010\000\004\000\000\000\000\000\
\005\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\000\000\006\000\007\000\008\000\009\000\027\000\010\000\035\000\
\036\000\003\000\000\000\004\000\000\000\000\000\005\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\000\000\006\000\
\007\000\008\000\009\000\000\000\010\000\055\000\003\000\000\000\
\004\000\033\000\000\000\005\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\000\000\006\000\007\000\008\000\009\000\
\000\000\010\000\003\000\053\000\004\000\000\000\000\000\005\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\000\000\
\006\000\007\000\008\000\009\000\003\000\010\000\004\000\000\000\
\054\000\005\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\000\000\006\000\007\000\008\000\009\000\000\000\010\000\
\003\000\056\000\004\000\000\000\000\000\005\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\000\000\006\000\007\000\
\008\000\009\000\003\000\010\000\004\000\000\000\000\000\005\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\000\000\
\006\000\007\000\008\000\009\000\004\000\010\000\000\000\005\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\000\000\
\006\000\007\000\008\000\009\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\000\000\015\000\015\000\000\000\000\000\016\000\016\000\
\016\000\016\000\016\000\000\000\016\000\015\000\015\000\016\000\
\016\000\007\000\007\000\007\000\007\000\007\000\000\000\007\000\
\000\000\000\000\016\000\016\000\017\000\017\000\017\000\017\000\
\017\000\000\000\000\000\000\000\000\000\007\000\007\000\008\000\
\008\000\000\000\008\000\008\000\011\000\000\000\011\000\011\000\
\017\000\017\000\009\000\009\000\000\000\009\000\009\000\013\000\
\000\000\013\000\013\000\008\000\008\000\000\000\000\000\011\000\
\011\000\014\000\000\000\014\000\014\000\000\000\009\000\009\000\
\000\000\000\000\013\000\013\000\018\000\000\000\018\000\018\000\
\019\000\000\000\019\000\019\000\014\000\014\000\010\000\000\000\
\010\000\010\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\000\000\000\000\019\000\019\000\000\000\003\000\000\000\
\004\000\010\000\010\000\005\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\000\000\006\000\007\000\008\000\009\000\
\005\000\010\000\021\000\022\000\023\000\024\000\025\000\026\000\
\000\000\006\000\007\000\008\000\009\000\005\000\010\000\021\000\
\022\000\000\000\000\000\025\000\026\000\000\000\006\000\007\000\
\008\000\009\000\000\000\010\000"

let yycheck = "\016\001\
\000\000\021\001\022\001\020\001\021\001\016\001\005\000\016\001\
\019\001\020\001\001\000\020\001\007\001\000\000\007\001\014\000\
\015\000\001\001\023\001\003\001\001\000\021\001\006\001\004\000\
\000\000\255\255\255\255\255\255\255\255\010\000\255\255\015\001\
\016\001\017\001\018\001\000\000\020\001\255\255\255\255\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\000\000\046\000\
\255\255\255\255\000\000\032\000\033\000\034\000\255\255\036\000\
\255\255\000\000\255\255\255\255\255\255\000\000\255\255\044\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\053\000\054\000\255\255\056\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\001\001\000\000\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\001\001\255\255\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\018\001\
\255\255\020\001\001\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\001\001\020\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\255\255\020\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\001\001\020\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\003\001\020\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\255\255\255\255\010\001\011\001\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\021\001\022\001\010\001\
\011\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\255\255\255\255\021\001\022\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\021\001\022\001\001\001\
\002\001\255\255\004\001\005\001\002\001\255\255\004\001\005\001\
\021\001\022\001\001\001\002\001\255\255\004\001\005\001\002\001\
\255\255\004\001\005\001\021\001\022\001\255\255\255\255\021\001\
\022\001\002\001\255\255\004\001\005\001\255\255\021\001\022\001\
\255\255\255\255\021\001\022\001\002\001\255\255\004\001\005\001\
\002\001\255\255\004\001\005\001\021\001\022\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\021\001\022\001\255\255\001\001\255\255\
\003\001\021\001\022\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\018\001\
\006\001\020\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\006\001\020\001\008\001\
\009\001\255\255\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\255\255\020\001"

let yynames_const = "\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  LESS\000\
  GREATER\000\
  TRUE\000\
  FALSE\000\
  REC\000\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  RIGHT_ARROW\000\
  "

let yynames_block = "\
  CHAR\000\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 33 "parser.mly"
                                       ( _1 )
# 267 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 36 "parser.mly"
                                          ( _2 )
# 274 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
                                          ( Ident(_1) )
# 281 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 38 "parser.mly"
                                          ( Number(_1) )
# 288 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                                          ( False )
# 294 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                                          ( True )
# 300 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 41 "parser.mly"
                                          ( Lambda(_2,_4) )
# 308 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 42 "parser.mly"
                                          ( Let(_2,_4,_6) )
# 317 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pat) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 43 "parser.mly"
                                          ( LetRec(_3,_5,_7) )
# 326 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 44 "parser.mly"
                                                 ( If(_2,_4,_6) )
# 335 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 45 "parser.mly"
                                            ( Apply(_1,_2) )
# 343 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 46 "parser.mly"
                                            ( Mlpair(_2,_4) )
# 351 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 47 "parser.mly"
                              ( Apply(Apply(Ident "+", _1), _3) )
# 359 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 48 "parser.mly"
                              ( Apply(Apply(Ident "-", _1), _3) )
# 367 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 49 "parser.mly"
                              ( Apply(Apply(Ident "*", _1), _3) )
# 375 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 50 "parser.mly"
                              ( Apply(Apply(Ident "/", _1), _3) )
# 383 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 51 "parser.mly"
                              ( Apply(Apply(Ident "=", _1), _3) )
# 391 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 52 "parser.mly"
                              ( Apply(Apply(Ident "<", _1), _3) )
# 399 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 53 "parser.mly"
                                ( Apply(Apply(Ident ">", _1), _3) )
# 407 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pat) in
    Obj.repr(
# 57 "parser.mly"
                                           ( _2 )
# 414 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                                           ( IdentPat(_1) )
# 421 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                                             ( NullPat )
# 427 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pat) in
    Obj.repr(
# 60 "parser.mly"
                                            ( Pairpat(_2,_4) )
# 435 "parser.ml"
               : 'pat))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
