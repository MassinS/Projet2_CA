# 1 "lexer.mll"
 
  open Parser
  
  (* DÃ©claration des exceptions *)
  exception Eof
  exception Parse_Exception of string * (int * int)  (* Ajoutez cette ligne *)

  (* Fonction pour obtenir la position *)
  let get_pos lexbuf =
    let pos = Lexing.lexeme_start_p lexbuf in
    (pos.pos_lnum, pos.pos_cnum - pos.pos_bol)

# 15 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\236\255\237\255\239\255\240\255\242\255\001\000\001\000\
    \003\000\005\000\250\255\251\255\000\000\000\000\006\000\014\000\
    \024\000\241\255\006\000\001\000\012\000\254\255\005\000\244\255\
    \009\000\013\000\007\000\022\000\253\255\248\255\238\255\008\000\
    \249\255\000\000\247\255\245\255\246\255\023\000\011\000\026\000\
    \243\255\001\000\253\255\254\255\005\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\019\000\019\000\
    \019\000\019\000\255\255\255\255\003\000\019\000\019\000\000\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\042\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\043\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\011\000\030\000\044\000\010\000\016\000\045\000\000\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\000\000\000\000\000\000\005\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\000\000\000\000\000\000\000\000\017\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\000\000\034\000\000\000\006\000\013\000\035\000\
    \033\000\007\000\031\000\022\000\009\000\038\000\018\000\036\000\
    \037\000\021\000\008\000\023\000\014\000\024\000\020\000\029\000\
    \019\000\026\000\027\000\028\000\032\000\002\000\039\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\041\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\012\000\041\000\000\000\000\000\044\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\255\255\255\255\255\255\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\013\000\255\255\033\000\255\255\000\000\000\000\007\000\
    \008\000\000\000\009\000\018\000\000\000\006\000\014\000\007\000\
    \006\000\020\000\000\000\022\000\000\000\013\000\019\000\024\000\
    \014\000\025\000\026\000\027\000\031\000\037\000\038\000\039\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 17 "lexer.mll"
                        lxm
# 134 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 18 "lexer.mll"
                    ( let n = int_of_string lxm in 
	                    INT(n) )
# 139 "lexer.ml"

  | 1 ->
# 20 "lexer.mll"
                     ( TRUE )
# 144 "lexer.ml"

  | 2 ->
# 21 "lexer.mll"
                     ( FALSE )
# 149 "lexer.ml"

  | 3 ->
# 22 "lexer.mll"
                     ( LPAREN )
# 154 "lexer.ml"

  | 4 ->
# 23 "lexer.mll"
                     ( RPAREN )
# 159 "lexer.ml"

  | 5 ->
# 24 "lexer.mll"
                     ( COMMA )
# 164 "lexer.ml"

  | 6 ->
# 25 "lexer.mll"
                     ( LET )
# 169 "lexer.ml"

  | 7 ->
# 26 "lexer.mll"
                     ( FUN )
# 174 "lexer.ml"

  | 8 ->
# 27 "lexer.mll"
                     ( REC )
# 179 "lexer.ml"

  | 9 ->
# 28 "lexer.mll"
                     ( IN )
# 184 "lexer.ml"

  | 10 ->
# 29 "lexer.mll"
                     ( IF )
# 189 "lexer.ml"

  | 11 ->
# 30 "lexer.mll"
                     ( THEN )
# 194 "lexer.ml"

  | 12 ->
# 31 "lexer.mll"
                     ( ELSE )
# 199 "lexer.ml"

  | 13 ->
# 32 "lexer.mll"
                     ( EQ )
# 204 "lexer.ml"

  | 14 ->
# 33 "lexer.mll"
                     ( RIGHT_ARROW )
# 209 "lexer.ml"

  | 15 ->
# 34 "lexer.mll"
                     ( (Lexing.new_line lexbuf) ; (token lexbuf) )
# 214 "lexer.ml"

  | 16 ->
# 35 "lexer.mll"
                     ( token lexbuf )
# 219 "lexer.ml"

  | 17 ->
# 36 "lexer.mll"
                     ( comment lexbuf )
# 224 "lexer.ml"

  | 18 ->
# 37 "lexer.mll"
                     ( EOF )
# 229 "lexer.ml"

  | 19 ->
let
# 38 "lexer.mll"
       lxm
# 235 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 38 "lexer.mll"
                     ( raise (Parse_Exception (Printf.sprintf "Unexpected character: %c" lxm, get_pos lexbuf)) )
# 239 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 41
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 41 "lexer.mll"
          ( token lexbuf )
# 251 "lexer.ml"

  | 1 ->
# 42 "lexer.mll"
          ( Lexing.new_line lexbuf; comment lexbuf )
# 256 "lexer.ml"

  | 2 ->
# 43 "lexer.mll"
          (comment lexbuf )
# 261 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

